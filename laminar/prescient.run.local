#!/bin/sh
# laminarc prescient machine=... vm=... commit=... vm_user=... vm_user_pass=...
machine=$1
vm=$2
vm_user=$3
vm_user_pass=$4
commit=$5
ci_vm="${vm}_Prescient"
cm="${commit}_${machine}"
x=0
state=`vboxmanage showvminfo "${vm}" 2>/dev/null | grep ^State: | awk '{$1=""; print substr($0,2)}'`
old_state=`cat "${HOME}/.prescient/${vm}" 2>/dev/null`
ci_state=`vboxmanage showvminfo "${ci_vm}" 2>/dev/null | grep ^State: | awk '{$1=""; print substr($0,2)}'`
if [ -z "$state" ]; then
  echo "VM '${vm}' doesn't exist!"
  exit 1
fi
clone_vm() {
  vboxmanage unregistervm "${ci_vm}" --delete 2>/dev/null
  vboxmanage snapshot "${vm}" edit PrescientCloneBase --name=PrecientCloneBaseOld 2>/dev/null
  vboxmanage snapshot "${vm}" take PrescientCloneBase
  vboxmanage snapshot "${vm}" delete PrecientCloneBaseOld 2>/dev/null
  vboxmanage clonevm "${vm}" --mode=machine --name="${ci_vm}" --options=Link --register --snapshot=PrescientCloneBase
  vboxmanage snapshot "${ci_vm}" take PrescientBase
  vboxmanage showvminfo "${vm}" 2>/dev/null | grep ^State: | awk '{$1=""; print substr($0,2)}' > "${HOME}/.prescient/${vm}"
}
if [ -n "`echo $state | grep running`" ]; then
  echo "\"${vm}\" is running, not cloning!"
elif [ "$state" != "$old_state" ]; then
  clone_vm
elif [ -n "`echo $ci_state | grep running`" ]; then
  echo "\"${ci_vm}\" is running, can't restore snapshot, exiting!"
  exit 1
elif [ -z "$ci_state" ]; then
  clone_vm
fi
vboxmanage snapshot "${ci_vm}" restore PrescientBase
unzip -q -d "${HOME}/.prescient/${cm}" "${HOME}/.prescient/${cm}.zip" tree/.prescient
exe=`grep "${machine}:" "${HOME}/.prescient/${cm}/tree/.prescient" | grep -o -E '[^a-zA-Z0-9_-]+[^:].*$' | grep -o -E '[^:].*'`
vboxmanage startvm "${ci_vm}" --type=headless
port=`shuf -i 30000-40000 -n 1`
vboxmanage controlvm "${ci_vm}" natpf1 delete prescient_ssh 2>/dev/null
vboxmanage controlvm "${ci_vm}" natpf1 "prescient_ssh,tcp,127.0.0.1,$port,,22"
started=''
maxwait=150
echo -n "Connecting to 127.0.0.1:${port} "
while [ -z "$started" ] && [ 0 -le $maxwait ]; do
  echo -n '.'
  started=`sleep 10; sshpass -p "${vm_user_pass}" ssh -n -o LogLevel=ERROR -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l "${vm_user}" -p ${port} 127.0.0.1 'echo started' 2>/dev/null`
  maxwait=`expr $maxwait - 10`
done
if [ 0 -ge $maxwait ]; then
  echo
  echo "Starting VM \"${ci_vm}\" timed out, exiting!"; x=1
else
  echo " connected"
  echo -n "Copying repo ... "
  sshpass -p "${vm_user_pass}" scp -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -P ${port} ~/.prescient/${cm}.zip "${vm_user}@127.0.0.1:~/"
  echo "done."
  echo -n "Unzipping repo ... "
  win=`vboxmanage guestproperty get "${ci_vm}" /VirtualBox/GuestInfo/OS/Product | grep -i windows`
  if [ -n "$win" ]; then
    sshpass -p "${vm_user_pass}" ssh -n -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l "${vm_user}" -p ${port} 127.0.0.1 powershell -Command Expand-Archive -Path "\$HOME/${cm}.zip" -DestinationPath "\$HOME"
  else
    sshpass -p "${vm_user_pass}" ssh -n -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l "${vm_user}" -p ${port} 127.0.0.1 unzip -q -d "\$HOME" "\$HOME/${cm}.zip"
  fi
  echo "done."
  echo "CI run started at: `date`"
  timeout 12h sshpass -p "${vm_user_pass}" ssh -n -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l "${vm_user}" -p ${port} 127.0.0.1 "cd \$HOME/tree; $exe" 2>&1 | tee ${cm}.log
  x=`sed -e 's/\s0\serrors//ig' -e 's/\s0\sfailures//ig' ${cm}.log | grep -c -i 'error\|fail\|abort'`
  echo "CI run with $x failures finished at: `date`"
  if [ -x "${HOME}/prescient/${vm}_plugin" ]; then
    timeout 12h "${HOME}/prescient/${vm}_plugin" "${vm}" "${ci_vm}" "${vm_user}" "${vm_user_pass}" "${port}"
  fi
fi
echo -n "Poweroff "
vboxmanage controlvm "${ci_vm}" poweroff
running='running'
while [ -n "$running" ]; do
  echo -n '.'
  running=`sleep 10; vboxmanage list runningvms | grep "\"${ci_vm}\""`
done
echo
# cleanup
rm -rf $HOME/.prescient/${cm}*
exit $x
