#!/bin/sh
# this script supports Windows and Linux
vm=$1
ci_vm=$2
vm_user=$3
vm_user_pass=$4
ci_port=$5
vm_port=`shuf -i 30000-40000 -n 1`
av_g="${HOME}/.prescient/${vm}_gems"
wa_g="${HOME}/.prescient/${vm}_wanted_gems"
win=`vboxmanage guestproperty get "$vm" /VirtualBox/GuestInfo/OS/Product | grep -i windows`
started='no'

start_vm() {
  if [ "$started" != 'yes' ]; then
    started='yes'
    vboxmanage startvm "$vm" --type=headless
    vboxmanage controlvm "$vm" natpf1 delete plugin_ssh 2>/dev/null
    vboxmanage controlvm "$vm" natpf1 "plugin_ssh,tcp,127.0.0.1,$vm_port,,22"
    echo "\"$vm\" started with ssh port $vm_port"
    ready=''
    maxwait=150
    while [ -z "$ready" ] && [ 0 -le $maxwait ]; do
      ready=`sleep 10; sshpass -p "$vm_user_pass" ssh -n -o LogLevel=ERROR -o ConnectTimeout=10 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l "$vm_user" -p $vm_port 127.0.0.1 'echo started' 2>/dev/null`
      maxwait=`expr $maxwait - 10`
    done
    if [ 0 -ge $maxwait ]; then
      echo "Starting VM \"${vm}\" timed out, exiting!"
      vboxmanage controlvm "$vm" poweroff # ensure vm is not hanging
      exit 1
    fi
  fi
}

vm_gem_list() {
  echo "Getting installed gems of '$vm'."
  if [ -n "$win" ]; then
    sshpass -p "$vm_user_pass" ssh -n -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l "$vm_user" -p $vm_port 127.0.0.1 "powershell -Command \"gem list -l\"" | tr -d '\r' | tail -n +4 > "$av_g"
  else
    sshpass -p "$vm_user_pass" ssh -n -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l "$vm_user" -p $vm_port 127.0.0.1 'bash -l -c "gem list -l"' | tail -n +4 > "$av_g"
  fi
}

stop_vm() {
  if [ "$started" = 'yes' ]; then
    echo "stopping $vm"
    vboxmanage controlvm "$vm" natpf1 delete plugin_ssh
    # try graceful poweroff
    # call 3 times in a row because some operating systems require 3 button presses
    vboxmanage controlvm "$vm" acpipowerbutton 2>&1
    vboxmanage controlvm "$vm" acpipowerbutton 2>&1
    vboxmanage controlvm "$vm" acpipowerbutton 2>&1
    running=`vboxmanage list runningvms | grep "\"$vm\""`
    maxwait=300
    while [ -n "$running" ] && [ 0 -le $maxwait ]; do
      running=`sleep 10; vboxmanage list runningvms | grep "\"$vm\""`
      maxwait=`expr $maxwait - 10`
    done
    # force poweroff
    if [ -n "$running" ]; then
      vboxmanage controlvm "$vm" poweroff
    fi
  fi
}

if [ ! -s "$av_g" ]; then
  start_vm
  vm_gem_list
fi

echo "Getting installed gems off '$ci_vm'."
if [ -n "$win" ]; then
  sshpass -p "$vm_user_pass" ssh -n -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l "$vm_user" -p $ci_port 127.0.0.1 "powershell -Command \"gem list -l\"" | tr -d '\r' | tail -n +4 > "$wa_g"
else
  sshpass -p "$vm_user_pass" ssh -n -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l "$vm_user" -p $ci_port 127.0.0.1 'bash -l -c "gem list -l"' | tail -n +4 > "$wa_g"
fi

if cmp -s "$av_g" "$wa_g"; then
  echo "Identical gems installed on '$vm' and '$ci_vm'."
else
  echo "Updating gems on '$vm'."
  start_vm
  while read -r gem_spec <&3; do
    gem_spec=`echo $gem_spec`
    installed_all=`grep "^$gem_spec" "$av_g"`
    echo "Gem: $gem_spec"
    if [ -z "$installed_all" ]; then
      gem=`echo "$gem_spec" | awk '{print $1}'`
      versions=`echo ${gem_spec/$gem} | sed 's/default://g; s/ruby//g; s/x86_64-linux//g; s/,//g; s/(//g; s/)//g'`
      installed_gem=`grep "^$gem " "$av_g"`
      for version in $versions; do
        has=`echo "$installed_gem" | grep -E "[( ]$version[,)]"`
        if [ -z "$has" ]; then
          echo "Already installed: ${installed_gem}, Installing: ${gem} ${version}"
          if [ -n "$win" ]; then
            sshpass -p "$vm_user_pass" ssh -n -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l "$vm_user" -p $vm_port 127.0.0.1 "powershell -Command \"gem install -v $version $gem\""
          else
            sshpass -p "$vm_user_pass" ssh -n -o LogLevel=ERROR -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -l "$vm_user" -p $vm_port 127.0.0.1 "bash -l -c \"gem install -v $version $gem\""
          fi
        fi
      done
    fi
  done 3< "$wa_g"
  vm_gem_list
fi

stop_vm
